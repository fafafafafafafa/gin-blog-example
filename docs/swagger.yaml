info:
  contact: {}
  description: An example of gin
  license:
    name: MIT
  title: Golang Gin API
  version: "1.0"
paths:
  /api/v1/articles:
    get:
      parameters:
      - description: State
        in: query
        name: state
        type: integer
      - description: TagId
        in: query
        name: tag_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Get Articles
    post:
      parameters:
      - description: Title
        in: query
        name: title
        required: true
        type: string
      - description: Desc
        in: query
        name: desc
        required: true
        type: string
      - description: Content
        in: query
        name: content
        required: true
        type: string
      - description: CreatedBy
        in: query
        name: created_by
        required: true
        type: string
      - description: TagId
        in: query
        name: tag_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Add Article
  /api/v1/articles/{id}:
    delete:
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Delete Article By Id
    get:
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Get Single Article By Id
    put:
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      - description: Title
        in: query
        name: title
        required: true
        type: string
      - description: Desc
        in: query
        name: desc
        required: true
        type: string
      - description: Content
        in: query
        name: content
        required: true
        type: string
      - description: ModifiedBy
        in: query
        name: modified_by
        required: true
        type: string
      - description: TagId
        in: query
        name: tag_id
        type: integer
      - description: State
        in: query
        name: state
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Update Article By Id
  /api/v1/tags/:
    get:
      parameters:
      - description: Name
        in: query
        name: name
        required: true
        type: string
      - description: State
        in: query
        name: state
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Get Tags
    post:
      parameters:
      - description: Name
        in: query
        name: name
        required: true
        type: string
      - description: State
        in: query
        name: state
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Add Tags
  /api/v1/tags/{id}:
    delete:
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Delete Tags By ID
    put:
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      - description: Name
        in: query
        name: name
        required: true
        type: string
      - description: ModifiedBy
        in: query
        name: modified_by
        required: true
        type: string
      - description: State
        in: query
        name: state
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Edit Tags By ID
  /auth:
    get:
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200, "data":{}, "msg": "ok"}'
          schema:
            type: string
      summary: Get Auth
swagger: "2.0"
